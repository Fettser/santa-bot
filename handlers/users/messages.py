from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from loader import dp
from keyboard.outline.choose_command import rem_ans, markup
from states.States import Interview
from is_message import from_message
import asyncio
from loader import bot
from aiogram.utils.exceptions import BotBlocked, ChatNotFound
from date_filter import date_filter
from keyboard.inline.inline import choice
from database import DBCommand

db = DBCommand()


@dp.message_handler(Text('–û—Ç–º–µ–Ω–∞'), state='*')
async def res_state(message: Message, state: FSMContext):
    await message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup)
    await state.reset_state()


@dp.message_handler(commands=['start'])
async def start_mess(message: Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞! üíî –î–ª—è —É—á–∞—Å—Ç–∏—è, –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n'
             '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!\n'
             '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –Ω–∞–∂–º–∏ /help',
        reply_markup=markup)


@dp.message_handler(Text('–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ'))
async def participate(message: Message):
    await message.answer(
        text='–ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É, '
             '—á—Ç–æ–±—ã —Ç–≤–æ–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ üòã '
             '–ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –ø–∏—à–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ\n\n'
             '–í–æ—Ç –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å:\n'
             '–§–ò–û, email, –≥–æ—Ä–æ–¥(—Å–µ–ª–æ, –¥–µ—Ä–µ–≤–Ω—è), –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å, '
             '—É–ª–∏—Ü–∞(—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–º–∞ –∏ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã), —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n\n'
             '–í–æ—Ç –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n'
             '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
             'ivanov@example.com\n'
             '–ì–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞\n'
             '123456\n'
             '–£–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞, –¥–æ–º –ö–æ–ª–æ—Ç—É—à–∫–∏–Ω–∞\n'
             '–£–≤–ª–µ–∫–∞—é—Å—å –∏–≥—Ä–æ–π –Ω–∞ –≥–∏—Ç–∞—Ä–µ\n\n'
             '–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É, —Ç–æ –Ω–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞".',
        reply_markup=rem_ans)
    await Interview.Q1.set()


@dp.message_handler(state=Interview.Q1)
async def req_on_form(message: Message, state: FSMContext):
    try:
        name, email, index, city, street, interests = await from_message(message.text)
        user_id = message.from_user.id
        msg = await db.add_new_user(name=name, email=email, index=index, user_id=user_id, city=city,
                                    street=street, interests=interests)
        await message.answer(text=msg, reply_markup=markup)
    except IndexError:
        await message.answer(text='–¢—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ä–º—É üòü\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                             reply_markup=markup)

    await state.reset_state()


@dp.message_handler(Text('–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'))
async def del_sab(message: Message):
    user_id = message.from_user.id
    msg = await db.remove_user(user_id=user_id)
    await message.answer(text=msg)


async def time(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        end_date, now_date = date_filter()
        if now_date == end_date:
            subs = await db.get_all_users()
            send_subs = list(reversed(subs))
            if len(subs) % 2:
                pass
            else:
                send_subs[0], send_subs[len(subs) // 2] = send_subs[len(subs) // 2], send_subs[0]
            for i in range(len(subs)):
                try:
                    await bot.send_message(chat_id=subs[i][3], text=f'–í–æ—Ç —Ç–≤–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π:\n\n{send_subs[i][0]}\n'
                                                                    f'{send_subs[i][1]}\n{send_subs[i][2]}\n'
                                                                    f'{send_subs[i][4]}\n'
                                                                    f'{send_subs[i][5]}\n{send_subs[i][6]}\n\n'
                                                                    f'–¢–µ–ø–µ—Ä—å –≤ –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã 2 –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã /get '
                                                                    f'–∏ /sent. –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É /get –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å'
                                                                    f' –ø–æ–¥–∞—Ä–æ–∫ –∏ /sent, –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å —Å–≤–æ–π',
                                           disable_notification=True)
                    await asyncio.sleep(0.3)
                except BotBlocked:
                    pass
                except ChatNotFound:
                    pass


@dp.message_handler(commands=['help'])
async def helper(message: Message):
    await message.answer(text='–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–∏—à–∏ –ú–∏—à–µ. –ü–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º - –ú–∞—à–µ.\n'
                              '–° —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã üòâ', reply_markup=choice)


@dp.message_handler(commands=['sent'])
async def sent(message: Message):
    user_id = message.from_user.id
    msg = await db.update_send(user_id)
    await message.answer(text=msg, reply_markup=markup)


@dp.message_handler(commands=['get'])
async def sent(message: Message):
    user_id = message.from_user.id
    msg = await db.update_get(user_id)
    await message.answer(text=msg, reply_markup=markup)
